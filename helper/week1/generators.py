# Функция-генератор, или метод-генератор – это функция, или
# метод, содержащая выражение yield. В результате обращения
# к функции генератору возвращается итератор. Значения из ите-
# ратора извлекаются по одному, с помощью его метода __next__().
# При каждом вызове метода __next__() он возвращает результат
# вычисления выражения yield. (Если выражение отсутствует,
# возвращается значение None.) Когда функция-генератор завер-
# шается или выполняет инструкцию return, возбуждается исклю-
# чение StopIteration.
# На практике очень редко приходится вызывать метод __next__()
# или обрабатывать исключение StopIteration. Обычно функция-
# генератор используется в качестве итерируемого объекта. Ни-
# же приводятся две практически эквивалентные функции. Функ-
# ция слева возвращает список, а функция справа возвращает ге-
# нератор.
# # Создает и возвращает список
def letter_range(a, z):
    result = []
    while ord(a) < ord(z):
        result.append(a)
        a = chr(ord(a) + 1)
    return result

# Возвращает каждое
# значение по требованию
def letter_range(a, z):
    while ord(a) < ord(z):
        yield a
        a = chr(ord(a) + 1)
list(letter_range("m", "v"))

# Результаты, воспроизводимые обеими функциями, можно обойти
# с помощью цикла for, например for letter in letter_range("m",
# "v"):. Однако когда требуется получить список символов с помо-
# щью функции слева, достаточно просто вызвать ее как let
# ter_range("m", "v"), а для функции справа необходимо выпол-
# нить преобразование: list(letter_range("m", "v")).
# Функции-генераторы и методы-генераторы (а также выраже-
# ния-генераторы) более полно рассматриваются в главе 8.
